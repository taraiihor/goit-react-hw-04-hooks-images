{"version":3,"sources":["components/Searchbar/Searchbar.js","components/Modal/Modal.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/ErrorView/ErrorView.js","api/api.js","App.js","index.js"],"names":["Searchbar","onSubmit","useState","searchImage","setSearchImage","reset","className","event","preventDefault","trim","alert","type","value","placeholder","onChange","target","modalRoot","document","querySelector","Modal","onClose","largeImageURL","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","onClick","currentTarget","src","alt","ImageGalleryItem","webformatURL","showModal","setShowModal","toggleModal","state","ImageGallery","articles","map","id","Button","ErrorView","message","fetchArticles","image","page","fetch","then","response","ok","json","Promise","reject","Error","API","propTypes","PropTypes","string","isRequired","number","App","setArticles","images","setImages","setPage","loading","setLoading","error","setError","hits","length","prevState","catch","finally","scroll","scrollToBottom","query","color","height","width","timeout","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.80a5e12e.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport './Searchbar.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Searchbar({ onSubmit }) {\r\n  //   state = {\r\n  //     searchImage: '',\r\n  //   };\r\n\r\n  const [searchImage, setSearchImage] = useState('');\r\n\r\n  //На хуках\r\n  const handleNameChangle = ({ target }) => {\r\n    const searchImage = target.value;\r\n    setSearchImage(searchImage);\r\n  };\r\n  //   handleNameChangle = event => {\r\n  //     const { value } = event.currentTarget;\r\n  //     this.setState({ searchImage: value });\r\n  //   };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (searchImage.trim() === '') {\r\n      alert('Ведіть щось');\r\n      return;\r\n    }\r\n    onSubmit(searchImage);\r\n    reset();\r\n  };\r\n  //   handleSubmit = event => {\r\n  //     event.preventDefault();\r\n  //     const { searchImage } = this.state;\r\n  //     if (searchImage.trim() === '') {\r\n  //       alert('Ведіть щось');\r\n  //       return;\r\n  //     }\r\n  //     this.props.onSubmit(searchImage);\r\n  //     this.reset();\r\n  //   };\r\n\r\n  const reset = () => {\r\n    setSearchImage('');\r\n  };\r\n  //   reset = () => {\r\n  //     this.setState({ searchImage: '' });\r\n  //   };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          value={searchImage}\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          placeholder=\"Search images and photos\"\r\n          onChange={handleNameChangle}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Searchbar;\r\n","import { useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport './Modal.css';\r\nimport PropTypes from 'prop-types';\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nfunction Modal({ onClose, largeImageURL }) {\r\n  //на Хуках\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  });\r\n  //   componentDidMount() {\r\n  //     window.addEventListener('keydown', this.handleKeyDown);\r\n  //   }\r\n  //   componentWillUnmount() {\r\n  //     window.removeEventListener('keydown', this.handleKeyDown);\r\n  //   }\r\n\r\n  const handleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n      onClose();\r\n    }\r\n  };\r\n  //   handleKeyDown = event => {\r\n  //     if (event.code === 'Escape') {\r\n  //       this.props.onClose();\r\n  //     }\r\n  //   };\r\n  const handeleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      onClose();\r\n    }\r\n  };\r\n  //   handeleBackdropClick = event => {\r\n  //     if (event.currentTarget === event.target) {\r\n  //       this.props.onClose();\r\n  //     }\r\n  //   };\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={handeleBackdropClick}>\r\n      <div className=\"Modal\">\r\n        <img src={largeImageURL} alt=\"\" />\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  largeImageURL: PropTypes.string.isRequired,\r\n};\r\nexport default Modal;\r\n","import { useState } from 'react';\r\nimport Modal from '../Modal/Modal';\r\nimport './ImageGalleryItem.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ImageGalleryItem({ webformatURL, largeImageURL }) {\r\n  // стейт на Хуках\r\n  const [showModal, setShowModal] = useState(false);\r\n  // стейт на класах\r\n  //   state = {\r\n  //     showModal: false,\r\n  //   };\r\n\r\n  //виклик модального вікна на Хуках\r\n  const toggleModal = () => setShowModal(state => !state);\r\n  //виклик модального вікна на класах\r\n  // toggleModal = () => {\r\n  //     this.setState(({ showModal }) => ({\r\n  //       showModal: !showModal,\r\n  //     }));\r\n  //   };\r\n\r\n  return (\r\n    <li>\r\n      <img\r\n        src={webformatURL}\r\n        alt=\"\"\r\n        className=\"ImageGalleryItem-image\"\r\n        onClick={toggleModal}\r\n      />\r\n      {showModal && (\r\n        <Modal onClose={toggleModal} largeImageURL={largeImageURL} />\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  webformatURL: PropTypes.string.isRequired,\r\n  largeImageURL: PropTypes.string.isRequired,\r\n};\r\nexport default ImageGalleryItem;\r\n","import './ImageGallery.css';\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ImageGallery({ articles }) {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {articles.map(({ id, largeImageURL, webformatURL }) => (\r\n        <ImageGalleryItem\r\n          key={id}\r\n          webformatURL={webformatURL}\r\n          largeImageURL={largeImageURL}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nImageGallery.propTypes = {\r\n  articles: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n};\r\nexport default ImageGallery;\r\n","import './Button.css';\nimport PropTypes from 'prop-types';\n\nfunction Button({ onClick }) {\n  const scroll = () => {\n    onClick();\n  };\n\n  return (\n    <button onClick={scroll} className=\"Button\" type=\"button\">\n      Загрузити ще...\n    </button>\n  );\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\nexport default Button;\n","function ErrorView({ message }) {\r\n  return <div className=\"Button\">{message}</div>;\r\n}\r\n\r\nexport default ErrorView;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst KEY = '8052974-676f52671a56653f7826cdc16';\r\n\r\nfunction fetchArticles(image, page) {\r\n  return fetch(\r\n    `https://pixabay.com/api/?q=${image}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`,\r\n  ).then(response => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`нема зображення ${image}`));\r\n  });\r\n}\r\n\r\nconst API = {\r\n  fetchArticles,\r\n};\r\n\r\nfetchArticles.propTypes = {\r\n  image: PropTypes.string.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default API;\r\n","import { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\nimport Loader from 'react-loader-spinner';\r\nimport Searchbar from './components/Searchbar';\r\nimport ImageGallery from './components/ImageGallery';\r\nimport Button from './components/Button';\r\nimport ErrorView from './components/ErrorView';\r\nimport API from './api/api';\r\n\r\nfunction App() {\r\n  const [articles, setArticles] = useState([]);\r\n  const [images, setImages] = useState('');\r\n  const [page, setPage] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  //   state = {\r\n  //     articles: [],\r\n  //     images: '',\r\n  //     page: 1,\r\n  //     loading: false,\r\n  //     error: null,\r\n  //   };\r\n\r\n  const handleFormSubmit = query => {\r\n    setImages(query);\r\n    setPage(1);\r\n    setArticles([]);\r\n    setError(null);\r\n  };\r\n  //   handleFormSubmit = query => {\r\n  //     this.setState({ images: query, page: 1, articles: [], error: null });\r\n  //   };\r\n\r\n  //   componentDidUpdate(prevProps, prevState) {\r\n  //     if (prevState.images !== this.state.images) {\r\n  //       this.setState({ loading: true });\r\n  //       this.fetchArticles();\r\n  //     }\r\n  //   }\r\n  useEffect(() => {\r\n    if (images === '') {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    API.fetchArticles(images, page)\r\n      .then(articles => {\r\n        if (articles.hits.length === 0) {\r\n          return Promise.reject(new Error(`такого зображення нема ${images}`));\r\n        }\r\n        setArticles(prevState => [...prevState, ...articles.hits]);\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n      })\r\n      .finally(() => setLoading(false));\r\n    scroll.scrollToBottom();\r\n  }, [images, page]);\r\n\r\n  //   fetchArticles = () => {\r\n  //     const { images, page } = this.state;\r\n  //     fetch(\r\n  //       `https://pixabay.com/api/?q=${images}&page=${page}&key=8052974-676f52671a56653f7826cdc16&image_type=photo&orientation=horizontal&per_page=12`,\r\n  //     )\r\n  //       .then(response => {\r\n  //         if (response.ok) {\r\n  //           return response.json();\r\n  //         }\r\n\r\n  //         return Promise.reject(new Error('нема зображення'));\r\n  //       })\r\n  //       .then(articles => {\r\n  //         this.setState(prevState => ({\r\n  //           articles: [...prevState.articles, ...articles.hits],\r\n  //           page: prevState.page + 1,\r\n  //         }));\r\n  //       })\r\n  //       .catch(error => this.setState({ error }))\r\n  //       .finally(() => this.setState({ loading: false }));\r\n  //   };\r\n  const updatePage = () => {\r\n    setPage(page => page + 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Searchbar onSubmit={handleFormSubmit} />\r\n      {error && <ErrorView message={error.message} />}\r\n      <ImageGallery articles={articles} />\r\n\r\n      {loading && (\r\n        <Loader\r\n          className=\"Loding\"\r\n          type=\"ThreeDots\"\r\n          color=\"#00BFFF\"\r\n          height={100}\r\n          width={100}\r\n          timeout={5000} //3 secs\r\n        />\r\n      )}\r\n      {articles.length > 11 && <Button onClick={updatePage} />}\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}